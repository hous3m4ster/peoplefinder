"use strict";

/*********************
 * The Message class *
 *********************/

/**
 * Represents a generic message received by a bot
 */
class Message {
	/**
	 * Creates a new instance of the Message class
	 *
	 *Â @param {Object} message	A [message]{@link https://core.telegram.org/bots/api#message} from an update object
	 * @param {BotAPI} API	An instance of a BotAPI from teleapiwrapper which will be used to do stuff with this message
	 *
	 * @private
	 */
	constructor(message, API) {
		/**
		 * The original message given to the constructor
		 *
		 * @private
		 */
		this._rawMessage = message;

		/**
		 * The api to use for this message
		 *
		 * @private
		 */
		this._API = API;
	}

	/**
	 * Upgrades the message to a subclass of the message. Won't actually upgrade the message, but return a new instance of the subclass you provide with the same data as this message
	 *
	 * @param {Function} messageType	The type of message to upgrade this one to
	 * @return {messageType}	A new instance of the type of message you wanted this one upgraded to
	 * @private
	 */
	_upgradeTo(messageType) {
		return new messageType(this.rawMessage, this._API);
	}

	/**
	 * The original [Message]{@link https://core.telegram.org/bots/api#message} object given to the constructor
	 *
	 * @type {Object}
	 * @readonly
	 */
	get rawMessage() {
		return this._rawMessage;
	}

	/**
	 * The ID of the message
	 *
	 * @type {Integer}
	 * @readonly
	 */
	get id() {
		return this.message_id;
	}

	/**
	 * Deprecated. Use "from" instead
	 *
	 * @readonly
	 * @type {Object}
	 * @deprecated
	 */
	get sender() {
		return this.from;
	}

	/**
	 * The [user]{@link https://core.telegram.org/bots/api#user} object of the sender of this message. This may or may not be null
	 *
	 * @type {Object}
	 * @property {Integer} id	ID of the sender
	 * @property {String} first_name	First name of the sender
	 * @property {String} [last_name]	Last name of the sender
	 * @property {String} [username]	Username of the sender
	 * @readonly
	 */
	get from() {
		return this.rawMessage.from;
	}

	/**
	 * The [chat]{@link https://core.telegram.org/bots/api#chat} object of the chat this message came from
	 *
	 * @type {Object}
	 * @property {Integer} id	ID of the chat the mssage came from
	 * @property {String} type	Type of the chat
	 * @property {String} [title]	Title of the chat
	 * @property {String} [username]	Username of the other party
	 * @property {String} [first_name]	First name of the other party
	 * @property {String} [last_name]	Last name of the other party
	 * @readonly
	 */
	get chat() {
		return this.rawMessage.chat;
	}

	/**
	 * Forwards this message to a chat
	 *
	 * @param {Integer|String} chatId	ID of the chat to forward the message to
	 *
	 * @return {Promise}	The promise returned from teleapiwrapper's forwardMessage()
	 */
	forward(chatId) {
		return this._API.forwardMessage({
			chat_id: chatId,
			from_chat_id: this.rawMessage.chat.id,
			message_id: this.rawMessage.message_id
		});
	}

	/**
	 * Sends a reply to a message
	 * @see {@link Message#answer}
	 *
	 * @param {String} text	The text to reply with
	 *
	 * @return {Promise}	The promise returned from teleapiwrapper's forwardMessage()
	 */
	reply(text) {
		return this._API.sendMessage({
			chat_id: this.rawMessage.chat.id,
			text: text,
			reply_to_message_id: this.rawMessage.message_id
		});
	}

	/**
	 * Sends a message to the same chat this message came from
	 * @see {@link Message#reply}
	 *
	 * @param {String} text	The text to send
	 *
	 * @return {Promise}	The promise returned from teleapiwrapper's forwardMessage()
	 */
	answer(text) {
		return this._API.sendMessage({
			chat_id: this.rawMessage.chat.id,
			text: text
		});
	}
}

/***********
 * Exports *
 ***********/

module.exports = Message;
