"use strict";

/************
 * Requires *
 ************/

var FileMessage = require("./file_message");

/*****************************
 * The DocumentMessage class *
 *****************************/

/**
 * A message which contains a downloadable document file
 *
 * @extends FileMessage
 */
class DocumentMessage extends FileMessage {
	/**
	 * Creates a new DocumentMessage object
	 *
	 * @param {Object}Â message	A raw message object from an update
	 * @param {BotAPI} API	An instance of a BotAPI from teleapiwrapper which will be used to do stuff with this message
	 *
	 * @private
	 */
	constructor(message, API) {
		// Call the super constructor
		super(message, API);
	}

	/**
	 * The [Document]{@link https://core.telegram.org/bots/api#document} object this message contains
	 *
	 * @type {Object}
	 * @property {String} file_id	ID of the document
	 * @property {Object} [thumb]	Thumbnail of the document, as a [PhotoSize]{@link https://core.telegram.org/bots/api#photosize} object
	 * @property {String} [file_name]	File name of the document
	 * @property {String} [mime_type]	Mime type of the document
	 * @property {Integer} [file_size]	Size of the document, in bytes
	 * @readonly
	 */
	get document() {
		return this.rawMessage.document;
	}

	/**
	 * Gets the name of the document as sent by the sender
	 *
	 * @type {String}
	 * @readonly
	 */
	get fileName() {
		return this.rawMessage.document.file_name;
	}

	/**
	 * Saves the file to disk
	 *
	 * @param {String} [filename]	The filename to save the document to. If not provided, the filename will be extracted from the document
	 *
	 * @return {Promise}	A promise which resolves when the file is saved
	 */
	saveFile(filename) {
		if (!filename) {
			filename = this.fileName;
		}
		return super.saveFile(filename);
	}
}

/***********
 * Exports *
 ***********/

module.exports = DocumentMessage;
