"use strict";

/************
 * Requires *
 ************/

var UpdateGetter = require("./update_getter");
var MessageTypes = require("./message_types/index");

/***************************
 * The MessageSorter class *
 ***************************/

/**
 * Listens for and sorts messages for a bot, firing events based on the message type
 *
 * @extends UpdateGetter
 */
class MessageSorter extends UpdateGetter {
	/**
	 * Creates a new message sorter, which gets messages for the bot and fires events based on what type of message it is
	 *
	 * @param {BotAPI} API	The api of the bot to sort messages for. Must be an api from [teleapiwrapper]{@link https://www.npmjs.com/package/teleapiwrapper}
	 */
	constructor(API) {
		super(API);

		// Set up the listeners and sorters
		this._setupListeners();
	}

	/**
	 * Sets up the listeners and parses messages
	 *
	 * @private
	 */
	_setupListeners() {
		this.on("message", message => {
			// Extract the raw message
			let rm = message.rawMessage;

			// Storage for the types of the message
			let messageTypes = [];

			// Will be a FileMessage at the end if the message contains a file
			let file = null;

			// Start sorting
			if (rm.forward_from !== undefined) {
				/**
				 * Fires when a forwarded message is received
				 *
				 * @event MessageSorter#forward
				 * @memberof MessageSorter
				 * @param {ForwardedMessage} message	The message received
				 */
				this.emit("forward", message._upgradeTo(MessageTypes.ForwardedMessage));
				messageTypes.push("forward");
			} else if (rm.reply_to_message !== undefined) {
				/**
				 * Fires when a reply to a message is received
				 *
				 * @event MessageSorter#reply
				 * @memberof MessageSorter
				 * @param {ReplyMessage} message	The message received
				 */
				this.emit("reply", message._upgradeTo(MessageTypes.ReplyMessage));
				messageTypes.push("reply");
			} else if (rm.text !== undefined) {
				// Ordinary text message. May be a command
				if (rm.text.charAt(0) == "/") {
					// Yup. This is a command
					/**
					 * Fires when a command is received
					 *
					 * @event MessageSorter#command
					 * @memberof MessageSorter
					 * @param {CommandMessage} message	The message received
					 */
					this.emit("command", message._upgradeTo(MessageTypes.CommandMessage));
					messageTypes.push("command");
				}
				/**
				 * Fires on any text message, including commands
				 *
				 * @event MessageSorter#text
				 * @memberof MessageSorter
				 * @param {TextMessage} message	The message received
				 */
				this.emit("text", message._upgradeTo(MessageTypes.TextMessage));
				messageTypes.push("text");
			}
			if (rm.audio !== undefined) {
				file = message._upgradeTo(MessageTypes.FileMessage);
				/**
				 * Fires when an audio message is received
				 *
				 * @event MessageSorter#audio
				 * @memberof MessageSorter
				 * @param {AudioMessage} message	The message received
				 */
				this.emit("audio", file._upgradeTo(MessageTypes.AudioMessage));
				messageTypes.push("audio");
			}
			if (rm.document !== undefined) {
				file = message._upgradeTo(MessageTypes.FileMessage);
				/**
				 * Fires when a document message is received
				 *
				 * @event MessageSorter#document
				 * @memberof MessageSorter
				 * @param {DocumentMessage} message	The message received
				 */
				this.emit("document", file._upgradeTo(MessageTypes.DocumentMessage));
				messageTypes.push("document");
			}
			if (rm.photo !== undefined) {
				file = message._upgradeTo(MessageTypes.FileMessage);
				/**
				 * Fires when a photo message is received
				 *
				 * @event MessageSorter#photo
				 * @memberof MessageSorter
				 * @param {PhotoMessage} message	The message received
				 */
				this.emit("photo", file._upgradeTo(MessageTypes.PhotoMessage));
				messageTypes.push("photo");
			}
			if (rm.sticker !== undefined) {
				file = message._upgradeTo(MessageTypes.FileMessage);
				/**
				 * Fires when a sticker message is received
				 *
				 * @event MessageSorter#sticker
				 * @memberof MessageSorter
				 * @param {StickerMessage} message	The message received
				 */
				this.emit("sticker", file._upgradeTo(MessageTypes.StickerMessage));
				messageTypes.push("sticker");
			}
			if (rm.video !== undefined) {
				file = message._upgradeTo(MessageTypes.FileMessage);
				/**
				 * Fires when a video message is received
				 *
				 * @event MessageSorter#video
				 * @memberof MessageSorter
				 * @param {VideoMessage} message	The message received
				 */
				this.emit("video", file._upgradeTo(MessageTypes.VideoMessage));
				messageTypes.push("video");
			}
			if (rm.voice !== undefined) {
				file = message._upgradeTo(MessageTypes.FileMessage);
				/**
				 * Fires when a voice message is received
				 *
				 * @event MessageSorter#voice
				 * @memberof MessageSorter
				 * @param {VoiceMessage} message	The message received
				 */
				this.emit("voice", file._upgradeTo(MessageTypes.VoiceMessage));
				messageTypes.push("voice");
			}
			if (rm.contact !== undefined) {
				/**
				 * Fires when a contact is received
				 *
				 * @event MessageSorter#contact
				 * @memberof MessageSorter
				 * @param {ContactMessage} message	The message received
				 */
				this.emit("contact", message._upgradeTo(MessageTypes.ContactMessage));
				messageTypes.push("contact");
			}
			if (rm.location !== undefined) {
				/**
				 * Fires when a location is received
				 *
				 * @event MessageSorter#location
				 * @memberof MessageSorter
				 * @param {LocationMessage} message	The message received
				 */
				this.emit("location", message._upgradeTo(MessageTypes.LocationMessage));
				messageTypes.push("location");
			}
			if (rm.new_chat_participant !== undefined) {
				/**
				 * Fires when a participant enters the chat
				 *
				 * @event MessageSorter#new_chat_participant
				 * @memberof MessageSorter
				 * @param {NewChatParticipantMessage} message	The message received
				 */
				this.emit("new_chat_participant", message._upgradeTo(MessageTypes.NewChatParticipantMessage));
				messageTypes.push("new_chat_participant");
			}
			if (rm.left_chat_participant !== undefined) {
				/**
				 * Fires when a participant leaves the chat
				 *
				 * @event MessageSorter#left_chat_participant
				 * @memberof MessageSorter
				 * @param {LeftChatParticipantMessage} message	The message received
				 */
				this.emit("left_chat_participant", message._upgradeTo(MessageTypes.LeftChatParticipantMessage));
				messageTypes.push("left_chat_participant");
			}
			if (rm.new_chat_title !== undefined) {
				/**
				 * Fires when the title of a chat changes
				 *
				 * @event MessageSorter#new_chat_title
				 * @memberof MessageSorter
				 * @param {NewChatTitleMessage} message	The message received
				 */
				this.emit("new_chat_title", message._upgradeTo(MessageTypes.NewChatTitleMessage));
				messageTypes.push("new_chat_title");
			}
			if (rm.new_chat_photo !== undefined) {
				/**
				 * Fires when the photo of a chat changes
				 *
				 * @event MessageSorter#new_chat_photo
				 * @memberof MessageSorter
				 * @param {NewChatPhotoMessage} message	The message received
				 */
				this.emit("new_chat_photo", message._upgradeTo(MessageTypes.NewChatPhotoMessage));
				messageTypes.push("new_chat_photo");
			}
			if (rm.delete_chat_photo !== undefined) {
				/**
				 * Fires when the chat photo is deleted
				 *
				 * @event MessageSorter#delete_chat_photo
				 * @memberof MessageSorter
				 * @param {DeleteChatPhotoMessage} message	The message received
				 */
				this.emit("delete_chat_photo", message._upgradeTo(MessageTypes.DeleteChatPhotoMessage));
				messageTypes.push("delete_chat_photo");
			}
			if (rm.group_chat_created !== undefined) {
				/**
				 * Fires when a group chat is created
				 *
				 * @event MessageSorter#group_chat_created
				 * @memberof MessageSorter
				 * @param {GroupChatCreatedMessage} message	The message received
				 */
				this.emit("group_chat_created", message._upgradeTo(MessageTypes.GroupChatCreatedMessage));
				messageTypes.push("group_chat_created");
			}
			if (rm.supergroup_chat_created !== undefined) {
				/**
				 * Fires when a supergroup chat is created
				 *
				 * @event MessageSorter#supergroup_chat_created
				 * @memberof MessageSorter
				 * @param {SupergroupChatCreatedMessage} message	The message received
				 */
				this.emit("supergroup_chat_created", message._upgradeTo(MessageTypes.SupergroupChatCreatedMessage));
				messageTypes.push("supergroup_chat_created");
			}
			if (rm.channel_chat_created !== undefined) {
				/**
				 * Fires when a channel chat is created
				 *
				 * @event MessageSorter#channel_chat_created
				 * @memberof MessageSorter
				 * @param {ChannelChatCreatedMessage} message	The message received
				 */
				this.emit("channel_chat_created", message._upgradeTo(MessageTypes.ChannelChatCreatedMessage));
				messageTypes.push("channel_chat_created");
			}
			if (rm.migrate_to_chat_id !== undefined) {
				/**
				 * Fires when a chat is migrated to a supergroup from a group
				 *
				 * @event MessageSorter#chat_migrated
				 * @memberof MessageSorter
				 * @param {ChatMigratedMessage} message	The message received
				 */
				this.emit("chat_migrated", message._upgradeTo(MessageTypes.ChatMigratedMessage));
				messageTypes.push("chat_migrated");
			}

			// Check if the message contains a file
			if (file !== null) {
				/**
				 * Fires when a message containing a file is received
				 *
				 * @event MessageSorter#file
				 * @memberof MessageSorter
				 * @param {FileMessage} message	The message received
				 */
				this.emit("file", file);
			}

			// Check if the message has multiple types
			if (messageTypes.length > 1) {
				/**
				 * Fires when a message with multiple types is processed, like a reply containing a command
				 *
				 * @event MessageSorter#multi_type
				 * @memberof MessageSorter
				 * @param {Message} message	The message received
				 * @param {String[]} types	The types this message has
				 */
				this.emit("multi_type", message, messageTypes);
			}
		});
	}
}

/***********
 * Exports *
 ***********/

module.exports = MessageSorter;
